src/hooks/FetchQuestion.js:import * as Action from '../redux/question_reducer'
node_modules/.cache/.eslintcache:[{"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/index.js":"1","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/App.js":"2","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/reportWebVitals.js":"3","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/TeacherDashboard.js":"4","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/Login.js":"5","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/SignUp.js":"6","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ParentDashboard.js":"7","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ChildDashboard.js":"8","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/PsychologistDashboard.js":"9","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ThankYou.js":"10","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ViewResponse.js":"11","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ForgotPass.js":"12","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/LandingPage.js":"13","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ResetPass.js":"14","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/Navbar.js":"15","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/Card.js":"16","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ProfileSection.js":"17","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/InteractionSummary.js":"18","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/PerformanceCard.js":"19","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/CircularProgress.js":"20","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/QuestionsPage.js":"21","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/Questions.js":"22","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js":"23","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/helper/helper.js":"24","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/redux/question_reducer.js":"25","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/setResult.js":"26","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/redux/result_reducer.js":"27","/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/redux/store.js":"28"},{"size":688,"mtime":1731347606204,"results":"29","hashOfConfig":"30"},{"size":1712,"mtime":1731306068441,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":1731277990694,"results":"32","hashOfConfig":"30"},{"size":296,"mtime":1731277990694,"results":"33","hashOfConfig":"30"},{"size":3706,"mtime":1731277990694,"results":"34","hashOfConfig":"30"},{"size":6009,"mtime":1731277990694,"results":"35","hashOfConfig":"30"},{"size":301,"mtime":1731277990694,"results":"36","hashOfConfig":"30"},{"size":287,"mtime":1731277990694,"results":"37","hashOfConfig":"30"},{"size":1460,"mtime":1731277990694,"results":"38","hashOfConfig":"30"},{"size":505,"mtime":1731277990694,"results":"39","hashOfConfig":"30"},{"size":661,"mtime":1731277990694,"results":"40","hashOfConfig":"30"},{"size":1102,"mtime":1731277990694,"results":"41","hashOfConfig":"30"},{"size":1141,"mtime":1731277990694,"results":"42","hashOfConfig":"30"},{"size":2214,"mtime":1731277990694,"results":"43","hashOfConfig":"30"},{"size":340,"mtime":1731277990694,"results":"44","hashOfConfig":"30"},{"size":307,"mtime":1731277990694,"results":"45","hashOfConfig":"30"},{"size":726,"mtime":1731277990694,"results":"46","hashOfConfig":"30"},{"size":2444,"mtime":1731277990694,"results":"47","hashOfConfig":"30"},{"size":787,"mtime":1731277990694,"results":"48","hashOfConfig":"30"},{"size":1663,"mtime":1731277990694,"results":"49","hashOfConfig":"30"},{"size":1998,"mtime":1731347434823,"results":"50","hashOfConfig":"30"},{"size":1860,"mtime":1731604786494,"results":"51","hashOfConfig":"30"},{"size":2004,"mtime":1731605059042,"results":"52","hashOfConfig":"30"},{"size":1114,"mtime":1731345680966,"results":"53","hashOfConfig":"30"},{"size":1059,"mtime":1731604897878,"results":"54","hashOfConfig":"30"},{"size":891,"mtime":1731563824663,"results":"55","hashOfConfig":"30"},{"size":869,"mtime":1731346593247,"results":"56","hashOfConfig":"30"},{"size":378,"mtime":1731346593331,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12n15c",{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/index.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/App.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/reportWebVitals.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/TeacherDashboard.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/Login.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/SignUp.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ParentDashboard.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ChildDashboard.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/PsychologistDashboard.js",["142"],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ThankYou.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ViewResponse.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ForgotPass.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/LandingPage.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ResetPass.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/Navbar.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/Card.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/ProfileSection.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/InteractionSummary.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/PerformanceCard.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/CircularProgress.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/QuestionsPage.js",["143"],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/components/Questions.js",["144","145","146","147"],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/helper/helper.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/redux/question_reducer.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/setResult.js",["148"],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/redux/result_reducer.js",[],[],"/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/redux/store.js",[],[],{"ruleId":"149","severity":1,"message":"150","line":8,"column":16,"nodeType":"151","messageId":"152","endLine":8,"endColumn":23},{"ruleId":"149","severity":1,"message":"153","line":1,"column":17,"nodeType":"151","messageId":"152","endLine":1,"endColumn":26},{"ruleId":"149","severity":1,"message":"154","line":14,"column":11,"nodeType":"151","messageId":"152","endLine":14,"endColumn":17},{"ruleId":"149","severity":1,"message":"155","line":15,"column":25,"nodeType":"151","messageId":"152","endLine":15,"endColumn":32},{"ruleId":"156","severity":1,"message":"157","line":22,"column":8,"nodeType":"158","endLine":22,"endColumn":17,"suggestions":"159"},{"ruleId":"149","severity":1,"message":"160","line":24,"column":14,"nodeType":"151","messageId":"152","endLine":24,"endColumn":22},{"ruleId":"161","severity":1,"message":"162","line":24,"column":23,"nodeType":"163","messageId":"164","endLine":24,"endColumn":25},"no-unused-vars","'setName' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'result' is assigned a value but never used.","'apiData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'trace'. Either include them or remove the dependency array.","ArrayExpression",["165"],"'onSelect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",{"desc":"166","fix":"167"},"Update the dependencies array to be: [checked, dispatch, trace]",{"range":"168","text":"169"},[738,747],"[checked, dispatch, trace]"]
node_modules/.cache/babel-loader/02c5bbcdf04150e8869ab125ef3b927c9a797308523b2d99199b5435fdf8216a.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"niggagz in paris\")\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","console","log","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();   \n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    useEffect(() => {\n        setGetData(prev => ({...prev, isLoading : true}));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                \n                console.log(questions)\n                console.log(answers)\n                if(questions.length > 0){\n                    setGetData(prev => ({...prev, isLoading : false}));\n                    setGetData(prev => ({...prev, apiData : questions}));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question : questions, answers }))\n\n                } else{\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"niggagz in paris\")\n                setGetData(prev => ({...prev, isLoading : false}));\n                setGetData(prev => ({...prev, serverError : error}));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;EAE7FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMZ,aAAa,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1HC,OAAO,CAACC,GAAG,CAACP,SAAS,CAAC;QACtBM,OAAO,CAACC,GAAG,CAACN,OAAO,CAAC;QACpB,IAAGD,SAAS,CAACQ,MAAM,GAAG,CAAC,EAAC;UACpBb,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAS,CAAC,CAAC,CAAC;;UAEpD;UACAP,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAGV,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEvE,CAAC,MAAK;UACF,MAAM,IAAIU,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACAjB,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGc;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CApCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAoChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/ef583130f564de2edc6981cc9ab5405839be7e10d70213198a8ffbe2c2e375bc.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionsData);\n        // console.log(answers)\n\n        if (questionsData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","questionsData","length","questions","startExamAction","question","answers","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questionsData)\n                    // console.log(answers)\n\n                    if (questionsData.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/a87d1256e8a11cb70bdf542e7bb972507bf936a14ca8fd426c143c702c08e054.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\");\n    (async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questionData\n          }));\n\n          // /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questionData\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n        console.log(\"line 18\");\n\n        (async () => {\n            try {\n                // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                console.log(\"line 23\")\n                console.log(questionData)\n                // console.log(answers)\n\n                if (questionData.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questionData }));\n\n                    // /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questionData }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"Error caught:\", error); // Log the full error object\n                // console.log(\"Error message:\", error.message); // Log the error message\n\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,CAAC,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QACzB;;QAEA,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAa,CAAC,CAAC,CAAC;;UAExD;UACAT,QAAQ,CAACH,MAAM,CAACkB,eAAe,CAAC;YAAEC,QAAQ,EAAEP;UAAa,CAAC,CAAC,CAAC;QAEhE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAhB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEa;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA3CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA2ChC,OAAO,MAAMwB,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOrB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACyB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/05a33d3bdb4eb05217e3d67cdfdc6b2beb85e16385a9d2fc8c568346b9abf567.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"l16\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"niggagz in paris\")\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"l16\")\n        \n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                console.log(questions)\n                console.log(answers)\n\n                if (questions.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questions }));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questions, answers }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"niggagz in paris\")\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,KAAK;;IAEjB,yCACC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEE,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMd,aAAa,CAAC,GAAGe,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1HR,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;QACtBH,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;QAEpB,IAAID,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;UACtBb,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAT,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAER,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACAjB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEc;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACR,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAvCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAuChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/8ddcf5b23dad310673a97c8bda504d5ca0bd259b5917129600956fcf65a33e5f.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          // dispatch(Action.startExamAction({ question: questions, answers }))\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questions.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        // dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n                \n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/bf4099b0df4dd6be2c18dfe863821f04b0cf537026f19c04ce1214b5d549038a.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    (async () => {\n      try {\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questionData\n          }));\n\n          // /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questionData\n          }));\n        } else {\n          throw new Error(\"No Question Available\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n\n        (async () => {\n            try {\n                const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                console.log(\"line 23\")\n                console.log(questionData)\n\n                if (questionData.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questionData }));\n\n                    // /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questionData }))\n\n                } else {\n                    throw new Error(\"No Question Available\");\n                }\n            } catch (error) {\n                // console.log(\"Error caught:\", error); // Log the full error object\n                // console.log(\"Error message:\", error.message); // Log the error message\n\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,CAAC,YAAY;MACT,IAAI;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QAEzB,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAa,CAAC,CAAC,CAAC;;UAExD;UACAT,QAAQ,CAACH,MAAM,CAACkB,eAAe,CAAC;YAAEC,QAAQ,EAAEP;UAAa,CAAC,CAAC,CAAC;QAEhE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAhB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEa;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAxCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAwChC,OAAO,MAAMwB,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOrB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACyB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/b85941e9f54bc283f768ee5816859b7544476fa98b14aed777df1e2fbbea47d3.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","console","log","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();   \n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    useEffect(() => {\n        setGetData(prev => ({...prev, isLoading : true}));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                console.log(questions)\n                console.log(answers)\n                if(questions.length > 0){\n                    setGetData(prev => ({...prev, isLoading : false}));\n                    setGetData(prev => ({...prev, apiData : questions}));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question : questions, answers }))\n\n                } else{\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                setGetData(prev => ({...prev, isLoading : false}));\n                setGetData(prev => ({...prev, serverError : error}));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;EAE7FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMZ,aAAa,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAC1HC,OAAO,CAACC,GAAG,CAACP,SAAS,CAAC;QACtBM,OAAO,CAACC,GAAG,CAACN,OAAO,CAAC;QACpB,IAAGD,SAAS,CAACQ,MAAM,GAAG,CAAC,EAAC;UACpBb,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAS,CAAC,CAAC,CAAC;;UAEpD;UACAP,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAGV,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEvE,CAAC,MAAK;UACF,MAAM,IAAIU,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZjB,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGc;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAlCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAkChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/bca321f0bbf18d65087d4a1f761e6c39e3cbc9dda07290961cd5acc88a46e959.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"niggagz in paris\")\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                console.log(questions)\n                console.log(answers)\n\n                if (questions.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questions }));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questions, answers }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"niggagz in paris\")\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;;IAElD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEM,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMd,aAAa,CAAC,GAAGe,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1HR,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;QACtBH,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;QAEpB,IAAID,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;UACtBb,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAT,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAER,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACAjB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEc;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAtCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAsChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/52b2e394d9fd569180d38582c8e2f082e9f1c27de1a177d3fe9d7c6c4db21ad4.json:{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n/** create reducer */\nexport const questionReducer = createSlice({\n  name: 'questions',\n  initialState: {\n    queue: [],\n    answers: [],\n    trace: 0\n  },\n  reducers: {\n    startExamAction: (state, action) => {\n      let {\n        question\n      } = action.payload;\n      return {\n        ...state,\n        queue: question\n      };\n    },\n    moveNextAction: state => {\n      return {\n        ...state,\n        trace: state.trace + 1\n      };\n    },\n    movePrevAction: state => {\n      return {\n        ...state,\n        trace: state.trace - 1\n      };\n    },\n    resetAllAction: () => {\n      return {\n        queue: [],\n        answers: [],\n        trace: 0\n      };\n    }\n  }\n});\nexport const {\n  startExamAction,\n  moveNextAction,\n  movePrevAction,\n  resetAllAction\n} = questionReducer.actions;\nexport default questionReducer.reducer;","map":{"version":3,"names":["createSlice","questionReducer","name","initialState","queue","answers","trace","reducers","startExamAction","state","action","question","payload","moveNextAction","movePrevAction","resetAllAction","actions","reducer"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/redux/question_reducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n/** create reducer */\nexport const questionReducer = createSlice({\n    name: 'questions',\n    initialState: {\n        queue: [],\n        answers: [],\n        trace: 0\n    },\n    reducers: {\n        startExamAction: (state, action) => {\n            let { question } = action.payload\n            return {\n                ...state,\n                queue: question\n            }\n        },\n        moveNextAction: (state) => {\n            return {\n                ...state,\n                trace: state.trace + 1\n            }\n        },\n        movePrevAction: (state) => {\n            return {\n                ...state,\n                trace: state.trace - 1\n            }\n        },\n        resetAllAction: () => {\n            return {\n                queue: [],\n                answers: [],\n                trace: 0\n            }\n        }\n    }\n})\n\nexport const { startExamAction, moveNextAction, movePrevAction, resetAllAction } = questionReducer.actions;\n\nexport default questionReducer.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,OAAO,MAAMC,eAAe,GAAGD,WAAW,CAAC;EACvCE,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAE;IACVC,KAAK,EAAE,EAAE;IACTC,OAAO,EAAE,EAAE;IACXC,KAAK,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACNC,eAAe,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAChC,IAAI;QAAEC;MAAS,CAAC,GAAGD,MAAM,CAACE,OAAO;MACjC,OAAO;QACH,GAAGH,KAAK;QACRL,KAAK,EAAEO;MACX,CAAC;IACL,CAAC;IACDE,cAAc,EAAGJ,KAAK,IAAK;MACvB,OAAO;QACH,GAAGA,KAAK;QACRH,KAAK,EAAEG,KAAK,CAACH,KAAK,GAAG;MACzB,CAAC;IACL,CAAC;IACDQ,cAAc,EAAGL,KAAK,IAAK;MACvB,OAAO;QACH,GAAGA,KAAK;QACRH,KAAK,EAAEG,KAAK,CAACH,KAAK,GAAG;MACzB,CAAC;IACL,CAAC;IACDS,cAAc,EAAEA,CAAA,KAAM;MAClB,OAAO;QACHX,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE,EAAE;QACXC,KAAK,EAAE;MACX,CAAC;IACL;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE,eAAe;EAAEK,cAAc;EAAEC,cAAc;EAAEC;AAAe,CAAC,GAAGd,eAAe,CAACe,OAAO;AAE1G,eAAef,eAAe,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/f68554f8884f8be39d4abe91ca9e37504ee1f089a03c30cf0253992bc36812c3.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questions.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n                \n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/72ce4200cc81d3358c89c0f6d4bd6b8dcb0164ec1d0dd64e6e8df652e28884f8.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\");\n    (async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          // /** dispatch an action */\n          // dispatch(Action.startExamAction({ question: questions, answers }))\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","questions","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n        console.log(\"line 18\");\n\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                    console.log(\"line 23\")\n                    console.log(questionData)\n                    // console.log(answers)\n\n                    if (questionData.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        // /** dispatch an action */\n                        // dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    // console.log(\"Error caught:\", error); // Log the full error object\n                    // console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAElB,CAAC,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QACzB;;QAEA,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEW;UAAU,CAAC,CAAC,CAAC;;UAErD;UACA;QAEJ,CAAC,MAAM;UACH,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAf,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEY;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACZ,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA3CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA2ChC,OAAO,MAAMuB,gBAAgB,GAAGA,CAAA,KAAM,MAAOlB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACsB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZX,OAAO,CAACC,GAAG,CAACU,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZX,OAAO,CAACC,GAAG,CAACU,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/b14946fe2d7dfb2cb796df80a814e6010a301f9d6d7bc41b64d3964c5cfc95f3.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    (async () => {\n      try {\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questionData\n          }));\n\n          // /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questionData\n          }));\n        } else {\n          throw new Error(\"No Question Avalile\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n\n        (async () => {\n            try {\n                const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                console.log(\"line 23\")\n                console.log(questionData)\n\n                if (questionData.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questionData }));\n\n                    // /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questionData }))\n\n                } else {\n                    throw new Error(\"No Question Avalile\");\n                }\n            } catch (error) {\n                // console.log(\"Error caught:\", error); // Log the full error object\n                // console.log(\"Error message:\", error.message); // Log the error message\n\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,CAAC,YAAY;MACT,IAAI;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QAEzB,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAa,CAAC,CAAC,CAAC;;UAExD;UACAT,QAAQ,CAACH,MAAM,CAACkB,eAAe,CAAC;YAAEC,QAAQ,EAAEP;UAAa,CAAC,CAAC,CAAC;QAEhE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,qBAAqB,CAAC;QAC1C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAhB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEa;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAxCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAwChC,OAAO,MAAMwB,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOrB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACyB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/fa06dcaa1d12507639015729bcaa69c3e92b9523419f9c17a3af4577133440fb.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\");\n    (async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          // /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","questions","startExamAction","question","answers","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n        console.log(\"line 18\");\n\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                    console.log(\"line 23\")\n                    console.log(questionData)\n                    // console.log(answers)\n\n                    if (questionData.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        // /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    // console.log(\"Error caught:\", error); // Log the full error object\n                    // console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAElB,CAAC,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QACzB;;QAEA,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEW;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAf,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAEF,SAAS;YAAEG;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAlB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEe;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACZ,CAAC,EAAE,CAACpB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA3CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA2ChC,OAAO,MAAM0B,gBAAgB,GAAGA,CAAA,KAAM,MAAOrB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACyB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZd,OAAO,CAACC,GAAG,CAACa,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOvB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC2B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZd,OAAO,CAACC,GAAG,CAACa,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/e25d99aad765b5a7e996c708bcd0ebb2b0956cc91cfd05fad460f73f3a88ace8.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\");\n    (async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questionData\n          }));\n\n          // /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questionData\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n        console.log(\"line 18\");\n\n        (async () => {\n            try {\n                // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                console.log(\"line 23\")\n                console.log(questionData)\n\n                if (questionData.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questionData }));\n\n                    // /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questionData }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"Error caught:\", error); // Log the full error object\n                // console.log(\"Error message:\", error.message); // Log the error message\n\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,CAAC,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QAEzB,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAa,CAAC,CAAC,CAAC;;UAExD;UACAT,QAAQ,CAACH,MAAM,CAACkB,eAAe,CAAC;YAAEC,QAAQ,EAAEP;UAAa,CAAC,CAAC,CAAC;QAEhE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAhB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEa;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA1CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA0ChC,OAAO,MAAMwB,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOrB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACyB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/6f4d9941617324327b448caad091fc334241177e8a970c881a0e23397b304ec9.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"\");\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","console","log","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();   \n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    useEffect(() => {\n        setGetData(prev => ({...prev, isLoading : true}));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                \n                if(questions.length > 0){\n                    setGetData(prev => ({...prev, isLoading : false}));\n                    setGetData(prev => ({...prev, apiData : questions}));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question : questions, answers }))\n\n                } else{\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                console.log(\"\")\n                setGetData(prev => ({...prev, isLoading : false}));\n                setGetData(prev => ({...prev, serverError : error}));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;EAE7FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMZ,aAAa,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1H,IAAGL,SAAS,CAACM,MAAM,GAAG,CAAC,EAAC;UACpBX,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAS,CAAC,CAAC,CAAC;;UAEpD;UACAP,QAAQ,CAACH,MAAM,CAACiB,eAAe,CAAC;YAAEC,QAAQ,EAAGR,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEvE,CAAC,MAAK;UACF,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;QACfjB,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGY;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAlCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAkChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAON,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/abf53d91966d02141242c4bd3b169d64c5140f2a5b14dd7dd12450e14cb018bc.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    (async () => {\n      try {\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questionData\n          }));\n\n          // /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questionData\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n\n        (async () => {\n            try {\n                const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                console.log(\"line 23\")\n                console.log(questionData)\n\n                if (questionData.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questionData }));\n\n                    // /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questionData }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"Error caught:\", error); // Log the full error object\n                // console.log(\"Error message:\", error.message); // Log the error message\n\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,CAAC,YAAY;MACT,IAAI;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QAEzB,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAa,CAAC,CAAC,CAAC;;UAExD;UACAT,QAAQ,CAACH,MAAM,CAACkB,eAAe,CAAC;YAAEC,QAAQ,EAAEP;UAAa,CAAC,CAAC,CAAC;QAEhE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAhB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEa;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAxCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAwChC,OAAO,MAAMwB,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOrB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACyB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/133e077d290e7a32079ae117039ae618b9187098bdf52d784e8886917c4ecc58.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(error)\n\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","error","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(error)\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questions.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAACE,KAAK;;IAEb,yCACC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEC,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMf,aAAa,CAAC,GAAGgB,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1HT,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACG,SAAS,CAAC;QACtBJ,OAAO,CAACC,GAAG,CAACI,OAAO,CAAC;QAEpB,IAAID,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;UACtBd,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEM;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAV,QAAQ,CAACH,MAAM,CAACoB,eAAe,CAAC;YAAEC,QAAQ,EAAER,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOV,KAAK,EAAE;QAEZP,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEI;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAzCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAyChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMa,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOd,KAAK,EAAE;IACZH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/5448258a1179ef4320ae025a549317574944b741342621ffd61f6530e6198f23.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\");\n    (async () => {\n      try {\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questionData\n          }));\n\n          // /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questionData\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n        console.log(\"line 18\");\n\n        (async () => {\n            try {\n                const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                console.log(\"line 23\")\n                console.log(questionData)\n\n                if (questionData.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questionData }));\n\n                    // /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questionData }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"Error caught:\", error); // Log the full error object\n                // console.log(\"Error message:\", error.message); // Log the error message\n\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,CAAC,YAAY;MACT,IAAI;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QAEzB,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAa,CAAC,CAAC,CAAC;;UAExD;UACAT,QAAQ,CAACH,MAAM,CAACkB,eAAe,CAAC;YAAEC,QAAQ,EAAEP;UAAa,CAAC,CAAC,CAAC;QAEhE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAhB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEa;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAzCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAyChC,OAAO,MAAMwB,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOrB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACyB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/10e099f2dfa907e31a055cbb1b54d671f3a695a166605be781382cb12d6ef240.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          // setGetData(prev => ({ ...prev, isLoading: false }));\n          // setGetData(prev => ({ ...prev, apiData: questions }));\n\n          // /** dispatch an action */\n          // dispatch(Action.startExamAction({ question: questions, answers }))\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questionData)\n                    // console.log(answers)\n\n                    if (questionData.length > 0) {\n                        // setGetData(prev => ({ ...prev, isLoading: false }));\n                        // setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        // /** dispatch an action */\n                        // dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    // console.log(\"Error caught:\", error); // Log the full error object\n                    // console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC,CAEjB,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAG9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QACzB;;QAEA,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzB;UACA;;UAEA;UACA;QAAA,CAEH,MAAM;UACH,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAd,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEW;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA5CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA4ChC,OAAO,MAAMsB,gBAAgB,GAAGA,CAAA,KAAM,MAAOjB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACqB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/9edba7d0d647f2971c1334e01bc8a9d9bd7b2f3221f8858f8f62be39efb9ff9a.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    // console.log(error)\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        // console.log(error)\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questions.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtB;IACAD,OAAO,CAACC,GAAG,CAAC,SAAS;;IAEjB,yCACC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEE,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMd,aAAa,CAAC,GAAGe,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1HR,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;QACtBH,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;QAEpB,IAAID,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;UACtBb,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAT,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAER,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QAEZjB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEc;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA1CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA0ChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/4fc6cbc094cfb6abddfb35dc5d2a13e4306721b35a67706eb4bf69d4408134c3.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","console","log","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();   \n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    useEffect(() => {\n        setGetData(prev => ({...prev, isLoading : true}));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                \n                if(questions.length > 0){\n                    setGetData(prev => ({...prev, isLoading : false}));\n                    setGetData(prev => ({...prev, apiData : questions}));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question : questions, answers }))\n\n                } else{\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                setGetData(prev => ({...prev, isLoading : false}));\n                setGetData(prev => ({...prev, serverError : error}));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;EAE7FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMZ,aAAa,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1H,IAAGL,SAAS,CAACM,MAAM,GAAG,CAAC,EAAC;UACpBX,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAS,CAAC,CAAC,CAAC;;UAEpD;UACAP,QAAQ,CAACH,MAAM,CAACiB,eAAe,CAAC;YAAEC,QAAQ,EAAGR,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEvE,CAAC,MAAK;UACF,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZf,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGY;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAjCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAiChC,OAAO,MAAMuB,gBAAgB,GAAGA,CAAA,KAAM,MAAOlB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACsB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAON,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/86167e6d400d027d7364977779272ab658abda9d2687e723109747b4917cce9a.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        // console.log(questions)\n        // console.log(answers)\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","console","log","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();   \n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    useEffect(() => {\n        setGetData(prev => ({...prev, isLoading : true}));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                // console.log(questions)\n                // console.log(answers)\n                if(questions.length > 0){\n                    setGetData(prev => ({...prev, isLoading : false}));\n                    setGetData(prev => ({...prev, apiData : questions}));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question : questions, answers }))\n\n                } else{\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                setGetData(prev => ({...prev, isLoading : false}));\n                setGetData(prev => ({...prev, serverError : error}));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;EAE7FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMZ,aAAa,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAC1H;QACA;QACA,IAAGL,SAAS,CAACM,MAAM,GAAG,CAAC,EAAC;UACpBX,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAS,CAAC,CAAC,CAAC;;UAEpD;UACAP,QAAQ,CAACH,MAAM,CAACiB,eAAe,CAAC;YAAEC,QAAQ,EAAGR,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEvE,CAAC,MAAK;UACF,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZf,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGY;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAlCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAkChC,OAAO,MAAMuB,gBAAgB,GAAGA,CAAA,KAAM,MAAOlB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACsB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAON,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/77a68da0d3db006e4f72137be6f1d72f93d632cc6e31e4e8b3289c9f8a21d42f.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questions.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/2ebbc0f910213299b303abc07fb35d41a0777ff92e463f3ed74ef615fd0c40de.json:{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n/** create reducer */\nexport const questionReducer = createSlice({\n  name: 'questions',\n  initialState: {\n    queue: [],\n    answers: [],\n    trace: 0\n  },\n  reducers: {\n    startExamAction: (state, action) => {\n      let {\n        question\n      } = action.payload;\n      return {\n        ...state,\n        queue: question,\n        answers\n      };\n    },\n    moveNextAction: state => {\n      return {\n        ...state,\n        trace: state.trace + 1\n      };\n    },\n    movePrevAction: state => {\n      return {\n        ...state,\n        trace: state.trace - 1\n      };\n    },\n    resetAllAction: () => {\n      return {\n        queue: [],\n        answers: [],\n        trace: 0\n      };\n    }\n  }\n});\nexport const {\n  startExamAction,\n  moveNextAction,\n  movePrevAction,\n  resetAllAction\n} = questionReducer.actions;\nexport default questionReducer.reducer;","map":{"version":3,"names":["createSlice","questionReducer","name","initialState","queue","answers","trace","reducers","startExamAction","state","action","question","payload","moveNextAction","movePrevAction","resetAllAction","actions","reducer"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/redux/question_reducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n/** create reducer */\nexport const questionReducer = createSlice({\n    name: 'questions',\n    initialState : {\n        queue: [],\n        answers : [],\n        trace : 0\n    },\n    reducers : {\n        startExamAction : (state, action) => {\n            let { question} = action.payload\n            return {\n                ...state,\n                queue : question,\n                answers\n            }\n        },\n        moveNextAction : (state) => {\n            return {\n                ...state,\n                trace : state.trace + 1\n            }\n        },\n        movePrevAction : (state) => {\n            return {\n                ...state,\n                trace : state.trace - 1\n            }\n        },\n        resetAllAction : () => {\n            return {\n                queue: [],\n                answers : [],\n                trace : 0\n            }\n        }\n    }\n})\n\nexport const { startExamAction, moveNextAction, movePrevAction, resetAllAction } = questionReducer.actions;\n\nexport default questionReducer.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,OAAO,MAAMC,eAAe,GAAGD,WAAW,CAAC;EACvCE,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAG;IACXC,KAAK,EAAE,EAAE;IACTC,OAAO,EAAG,EAAE;IACZC,KAAK,EAAG;EACZ,CAAC;EACDC,QAAQ,EAAG;IACPC,eAAe,EAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjC,IAAI;QAAEC;MAAQ,CAAC,GAAGD,MAAM,CAACE,OAAO;MAChC,OAAO;QACH,GAAGH,KAAK;QACRL,KAAK,EAAGO,QAAQ;QAChBN;MACJ,CAAC;IACL,CAAC;IACDQ,cAAc,EAAIJ,KAAK,IAAK;MACxB,OAAO;QACH,GAAGA,KAAK;QACRH,KAAK,EAAGG,KAAK,CAACH,KAAK,GAAG;MAC1B,CAAC;IACL,CAAC;IACDQ,cAAc,EAAIL,KAAK,IAAK;MACxB,OAAO;QACH,GAAGA,KAAK;QACRH,KAAK,EAAGG,KAAK,CAACH,KAAK,GAAG;MAC1B,CAAC;IACL,CAAC;IACDS,cAAc,EAAGA,CAAA,KAAM;MACnB,OAAO;QACHX,KAAK,EAAE,EAAE;QACTC,OAAO,EAAG,EAAE;QACZC,KAAK,EAAG;MACZ,CAAC;IACL;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE,eAAe;EAAEK,cAAc;EAAEC,cAAc;EAAEC;AAAe,CAAC,GAAGd,eAAe,CAACe,OAAO;AAE1G,eAAef,eAAe,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/67c1442e84753d9146167ad057c2477218753ed56733374b89e7df85b8921179.json:{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n/** create reducer */\nexport const questionReducer = createSlice({\n  name: 'questions',\n  initialState: {\n    queue: [],\n    answers: [],\n    trace: 0\n  },\n  reducers: {\n    startExamAction: (state, action) => {\n      let {\n        question\n      } = action.payload;\n      return {\n        ...state,\n        queue: question\n      };\n    },\n    moveNextAction: state => {\n      return {\n        ...state,\n        trace: state.trace + 1\n      };\n    },\n    movePrevAction: state => {\n      return {\n        ...state,\n        trace: state.trace - 1\n      };\n    },\n    resetAllAction: () => {\n      return {\n        queue: [],\n        answers: [],\n        trace: 0\n      };\n    }\n  }\n});\nexport const {\n  startExamAction,\n  moveNextAction,\n  movePrevAction,\n  resetAllAction\n} = questionReducer.actions;\nexport default questionReducer.reducer;","map":{"version":3,"names":["createSlice","questionReducer","name","initialState","queue","answers","trace","reducers","startExamAction","state","action","question","payload","moveNextAction","movePrevAction","resetAllAction","actions","reducer"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/redux/question_reducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n/** create reducer */\nexport const questionReducer = createSlice({\n    name: 'questions',\n    initialState : {\n        queue: [],\n        answers : [],\n        trace : 0\n    },\n    reducers : {\n        startExamAction : (state, action) => {\n            let { question} = action.payload\n            return {\n                ...state,\n                queue : question\n            }\n        },\n        moveNextAction : (state) => {\n            return {\n                ...state,\n                trace : state.trace + 1\n            }\n        },\n        movePrevAction : (state) => {\n            return {\n                ...state,\n                trace : state.trace - 1\n            }\n        },\n        resetAllAction : () => {\n            return {\n                queue: [],\n                answers : [],\n                trace : 0\n            }\n        }\n    }\n})\n\nexport const { startExamAction, moveNextAction, movePrevAction, resetAllAction } = questionReducer.actions;\n\nexport default questionReducer.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,OAAO,MAAMC,eAAe,GAAGD,WAAW,CAAC;EACvCE,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAG;IACXC,KAAK,EAAE,EAAE;IACTC,OAAO,EAAG,EAAE;IACZC,KAAK,EAAG;EACZ,CAAC;EACDC,QAAQ,EAAG;IACPC,eAAe,EAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjC,IAAI;QAAEC;MAAQ,CAAC,GAAGD,MAAM,CAACE,OAAO;MAChC,OAAO;QACH,GAAGH,KAAK;QACRL,KAAK,EAAGO;MACZ,CAAC;IACL,CAAC;IACDE,cAAc,EAAIJ,KAAK,IAAK;MACxB,OAAO;QACH,GAAGA,KAAK;QACRH,KAAK,EAAGG,KAAK,CAACH,KAAK,GAAG;MAC1B,CAAC;IACL,CAAC;IACDQ,cAAc,EAAIL,KAAK,IAAK;MACxB,OAAO;QACH,GAAGA,KAAK;QACRH,KAAK,EAAGG,KAAK,CAACH,KAAK,GAAG;MAC1B,CAAC;IACL,CAAC;IACDS,cAAc,EAAGA,CAAA,KAAM;MACnB,OAAO;QACHX,KAAK,EAAE,EAAE;QACTC,OAAO,EAAG,EAAE;QACZC,KAAK,EAAG;MACZ,CAAC;IACL;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE,eAAe;EAAEK,cAAc;EAAEC,cAAc;EAAEC;AAAe,CAAC,GAAGd,eAAe,CAACe,OAAO;AAE1G,eAAef,eAAe,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/4c59d051b52715033971fe333d2ca47c972aee5b3f013275661f374759b3b192.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log('')\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"niggagz in paris\")\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log('')\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                console.log(questions)\n                console.log(answers)\n\n                if (questions.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questions }));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questions, answers }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"niggagz in paris\")\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,EAAE;IACd,yCACC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEE,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMd,aAAa,CAAC,GAAGe,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1HR,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;QACtBH,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;QAEpB,IAAID,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;UACtBb,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAT,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAER,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACAjB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEc;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACR,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAtCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAsChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/45e8a9904ff2e76aa9bc1052cb1442bf47f5e3f3022a97ef068889c33e6b2006.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questions.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/a987c672f79010a8f221e121a4986b4dec8fecaae05bc081fc7096275e1b0e51.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    (async () => {\n      try {\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questionData\n          }));\n\n          // /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questionData\n          }));\n        } else {\n          throw new Error(\"No Question Available\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n\n        (async () => {\n            try {\n                const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                console.log(\"line 23\")\n                console.log(questionData)\n\n                if (questionData.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questionData }));\n\n                    // /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questionData }))\n\n                } else {\n                    throw new Error(\"No Question Available\");\n                }\n            } catch (error) {\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,CAAC,YAAY;MACT,IAAI;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QAEzB,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAa,CAAC,CAAC,CAAC;;UAExD;UACAT,QAAQ,CAACH,MAAM,CAACkB,eAAe,CAAC;YAAEC,QAAQ,EAAEP;UAAa,CAAC,CAAC,CAAC;QAEhE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZhB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEa;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CArCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAqChC,OAAO,MAAMwB,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOrB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACyB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/555ebf8a8834eff45368ab6b36aaf654398e820ca5d68f3dd50d27370764c113.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"niggagz in paris\")\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        \n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                console.log(questions)\n                console.log(answers)\n\n                if (questions.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questions }));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questions, answers }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"niggagz in paris\")\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;;IAElD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEM,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMd,aAAa,CAAC,GAAGe,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1HR,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;QACtBH,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;QAEpB,IAAID,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;UACtBb,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAT,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAER,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACAjB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEc;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAtCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAsChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/7720fa08d1ec45886a44618ba92ba4b10dd1069aa018cf6e7e4c658312c3bf4b.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(questions);\n        print(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","console","log","print","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();   \n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    useEffect(() => {\n        setGetData(prev => ({...prev, isLoading : true}));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                console.log(questions)\n                print(answers)\n                if(questions.length > 0){\n                    setGetData(prev => ({...prev, isLoading : false}));\n                    setGetData(prev => ({...prev, apiData : questions}));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question : questions, answers }))\n\n                } else{\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                setGetData(prev => ({...prev, isLoading : false}));\n                setGetData(prev => ({...prev, serverError : error}));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;EAE7FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMZ,aAAa,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAC1HC,OAAO,CAACC,GAAG,CAACP,SAAS,CAAC;QACtBQ,KAAK,CAACP,OAAO,CAAC;QACd,IAAGD,SAAS,CAACS,MAAM,GAAG,CAAC,EAAC;UACpBd,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAS,CAAC,CAAC,CAAC;;UAEpD;UACAP,QAAQ,CAACH,MAAM,CAACoB,eAAe,CAAC;YAAEC,QAAQ,EAAGX,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEvE,CAAC,MAAK;UACF,MAAM,IAAIW,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZlB,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGe;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACpB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAlCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAkChC,OAAO,MAAM0B,gBAAgB,GAAGA,CAAA,KAAM,MAAOrB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACyB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZP,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOvB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC2B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZP,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/c38af1fc36d28f9286d85cb830cdc7f901cdf152240f0a76cbcecdd7fd108420.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","questions","startExamAction","question","answers","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questionData)\n                    // console.log(answers)\n\n                    if (questionData.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    // console.log(\"Error caught:\", error); // Log the full error object\n                    // console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS;;IAEjB,yCACC,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAG9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QACzB;;QAEA,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEW;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAf,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAEF,SAAS;YAAEG;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAlB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEe;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,EAAE,CAACpB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA7CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA6ChC,OAAO,MAAM0B,gBAAgB,GAAGA,CAAA,KAAM,MAAOrB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACyB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZd,OAAO,CAACC,GAAG,CAACa,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOvB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC2B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZd,OAAO,CAACC,GAAG,CAACa,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/5ac67faf29a56ab05ee7297d3842c0f5c7a1c9a76711eb36f30cff3ba4d2e8ea.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        print(questions);\n        print(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","print","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","console","log","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();   \n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    useEffect(() => {\n        setGetData(prev => ({...prev, isLoading : true}));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                print(questions)\n                print(answers)\n                if(questions.length > 0){\n                    setGetData(prev => ({...prev, isLoading : false}));\n                    setGetData(prev => ({...prev, apiData : questions}));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question : questions, answers }))\n\n                } else{\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                setGetData(prev => ({...prev, isLoading : false}));\n                setGetData(prev => ({...prev, serverError : error}));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;EAE7FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMZ,aAAa,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAC1HC,KAAK,CAACN,SAAS,CAAC;QAChBM,KAAK,CAACL,OAAO,CAAC;QACd,IAAGD,SAAS,CAACO,MAAM,GAAG,CAAC,EAAC;UACpBZ,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAS,CAAC,CAAC,CAAC;;UAEpD;UACAP,QAAQ,CAACH,MAAM,CAACkB,eAAe,CAAC;YAAEC,QAAQ,EAAGT,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEvE,CAAC,MAAK;UACF,MAAM,IAAIS,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZhB,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGa;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAlCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAkChC,OAAO,MAAMwB,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAAA,KAAM,MAAOvB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC2B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAON,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/3f26f479d977ebc94bc370dd71e53ac746f729813a53d9d2368f312158801f55.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionsData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","questionsData","length","questions","startExamAction","question","answers","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questionData)\n                    // console.log(answers)\n\n                    if (questionsData.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/b2a6a0d012303d440ca7723f081e3b412b1b04fac5c78c85168101de93af7a91.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","questions","answers","length","startExamAction","question","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n                    \n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questions.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/7271fcda8648f3910a06ca9253c770b14a73e9f00deea9e411bc04481c84ead1.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"niggagz in paris\")\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","console","log","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();   \n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    useEffect(() => {\n        setGetData(prev => ({...prev, isLoading : true}));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                \n                if(questions.length > 0){\n                    setGetData(prev => ({...prev, isLoading : false}));\n                    setGetData(prev => ({...prev, apiData : questions}));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question : questions, answers }))\n\n                } else{\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"niggagz in paris\")\n                setGetData(prev => ({...prev, isLoading : false}));\n                setGetData(prev => ({...prev, serverError : error}));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;EAE7FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMZ,aAAa,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1H,IAAGL,SAAS,CAACM,MAAM,GAAG,CAAC,EAAC;UACpBX,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAS,CAAC,CAAC,CAAC;;UAEpD;UACAP,QAAQ,CAACH,MAAM,CAACiB,eAAe,CAAC;YAAEC,QAAQ,EAAGR,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEvE,CAAC,MAAK;UACF,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACAf,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGY;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAlCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAkChC,OAAO,MAAMuB,gBAAgB,GAAGA,CAAA,KAAM,MAAOlB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACsB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAON,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/3913c521aaa3183c49848322a8b1ac8322e435b31b664898044d1894661cbb39.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          // setGetData(prev => ({ ...prev, isLoading: false }));\n          // setGetData(prev => ({ ...prev, apiData: questions }));\n\n          // /** dispatch an action */\n          // dispatch(Action.startExamAction({ question: questions, answers }))\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n        console.log(\"line 18\")\n\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questionData)\n                    // console.log(answers)\n\n                    if (questionData.length > 0) {\n                        // setGetData(prev => ({ ...prev, isLoading: false }));\n                        // setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        // /** dispatch an action */\n                        // dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    // console.log(\"Error caught:\", error); // Log the full error object\n                    // console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC,CAEjB,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAG9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QACzB;;QAEA,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzB;UACA;;UAEA;UACA;QAAA,CAEH,MAAM;UACH,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAd,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEW;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA5CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA4ChC,OAAO,MAAMsB,gBAAgB,GAAGA,CAAA,KAAM,MAAOjB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACqB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/d89127582ccdc1c314821cba9182c9498a2d35f210de0bea2d6b693dc713aa1f.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          // setGetData(prev => ({ ...prev, isLoading: false }));\n          // setGetData(prev => ({ ...prev, apiData: questions }));\n\n          // /** dispatch an action */\n          // dispatch(Action.startExamAction({ question: questions, answers }))\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questionData)\n                    // console.log(answers)\n\n                    if (questionData.length > 0) {\n                        // setGetData(prev => ({ ...prev, isLoading: false }));\n                        // setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        // /** dispatch an action */\n                        // dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    // console.log(\"Error caught:\", error); // Log the full error object\n                    // console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS;;IAEjB,yCACC,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAG9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QACzB;;QAEA,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzB;UACA;;UAEA;UACA;QAAA,CAEH,MAAM;UACH,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAd,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEW;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA7CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA6ChC,OAAO,MAAMsB,gBAAgB,GAAGA,CAAA,KAAM,MAAOjB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACqB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/25a0a2af7618eab4a84669ffcf6ef16ded88607b203bf60ec9d7da4b63413e5f.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionsData);\n        console.log(answers);\n        if (questionsData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","questionsData","answers","length","questions","startExamAction","question","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questionsData)\n                    console.log(answers)\n\n                    if (questionsData.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/4c15135a131815df3637e84ef149ae70351ffda5bbe8f037935cff46446165a0.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","questionData","length","startExamAction","question","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questions.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/d789acfdb8747fcec4e4515262e6fd816dfa42c1c9dd403c86121aae2bad362a.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"niggagz in paris\");\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","console","log","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();   \n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    useEffect(() => {\n        setGetData(prev => ({...prev, isLoading : true}));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                \n                if(questions.length > 0){\n                    setGetData(prev => ({...prev, isLoading : false}));\n                    setGetData(prev => ({...prev, apiData : questions}));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question : questions, answers }))\n\n                } else{\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                console.log(\"niggagz in paris\")\n                setGetData(prev => ({...prev, isLoading : false}));\n                setGetData(prev => ({...prev, serverError : error}));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;EAE7FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMZ,aAAa,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1H,IAAGL,SAAS,CAACM,MAAM,GAAG,CAAC,EAAC;UACpBX,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAS,CAAC,CAAC,CAAC;;UAEpD;UACAP,QAAQ,CAACH,MAAM,CAACiB,eAAe,CAAC;YAAEC,QAAQ,EAAGR,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEvE,CAAC,MAAK;UACF,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/BjB,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGY;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAlCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAkChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAON,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/49c073e0ce249495b5099c6455dc9a25aa2e55b8a6046a987ccd01fb9fc8df94.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\");\n    (async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          // setGetData(prev => ({ ...prev, isLoading: false }));\n          // setGetData(prev => ({ ...prev, apiData: questions }));\n\n          // /** dispatch an action */\n          // dispatch(Action.startExamAction({ question: questions, answers }))\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n        console.log(\"line 18\");\n\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questionData)\n                    // console.log(answers)\n\n                    if (questionData.length > 0) {\n                        // setGetData(prev => ({ ...prev, isLoading: false }));\n                        // setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        // /** dispatch an action */\n                        // dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    // console.log(\"Error caught:\", error); // Log the full error object\n                    // console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAElB,CAAC,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAG9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QACzB;;QAEA,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzB;UACA;;UAEA;UACA;QAAA,CAEH,MAAM;UACH,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAd,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEW;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACZ,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA5CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA4ChC,OAAO,MAAMsB,gBAAgB,GAAGA,CAAA,KAAM,MAAOjB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACqB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/c19f766188de5e2392f08f0bc384cb9c3ac0953da355ce53aec7a6fb9faf38b2.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\");\n    (async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          // setGetData(prev => ({ ...prev, isLoading: false }));\n          // setGetData(prev => ({ ...prev, apiData: questions }));\n\n          // /** dispatch an action */\n          // dispatch(Action.startExamAction({ question: questions, answers }))\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n        console.log(\"line 18\");\n\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                    console.log(\"line 23\")\n                    console.log(questionData)\n                    // console.log(answers)\n\n                    if (questionData.length > 0) {\n                        // setGetData(prev => ({ ...prev, isLoading: false }));\n                        // setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        // /** dispatch an action */\n                        // dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    // console.log(\"Error caught:\", error); // Log the full error object\n                    // console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAElB,CAAC,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QACzB;;QAEA,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzB;UACA;;UAEA;UACA;QAAA,CAEH,MAAM;UACH,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAd,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEW;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACZ,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA3CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA2ChC,OAAO,MAAMsB,gBAAgB,GAAGA,CAAA,KAAM,MAAOjB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACqB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/52fcb30cf3b84ec41ce8d70d2a313f2485a7c480772e6272dfbc184dd876e76a.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\");\n    (async () => {\n      try {\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questionData\n          }));\n\n          // /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questionData\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n        console.log(\"line 18\");\n\n        (async () => {\n            try {\n\n                const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                console.log(\"line 23\")\n                console.log(questionData)\n\n                if (questionData.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questionData }));\n\n                    // /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questionData }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"Error caught:\", error); // Log the full error object\n                // console.log(\"Error message:\", error.message); // Log the error message\n\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,CAAC,YAAY;MACT,IAAI;QAEA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QAEzB,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAa,CAAC,CAAC,CAAC;;UAExD;UACAT,QAAQ,CAACH,MAAM,CAACkB,eAAe,CAAC;YAAEC,QAAQ,EAAEP;UAAa,CAAC,CAAC,CAAC;QAEhE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAhB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEa;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA1CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA0ChC,OAAO,MAAMwB,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOrB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACyB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/7ee23be5c934eb07fce431bd2610ff21e59fa3e1d45dfbd43dc21ebb62256a11.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","questions","startExamAction","question","answers","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questionData)\n                    // console.log(answers)\n\n                    if (questionData.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/aefe401a9c1438e50862ca158a941fbd645ab0b2fb9f39121dbdf5aba3c58bb7.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questionsDa.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","questions","answers","questionsDa","length","startExamAction","question","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questionsDa.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/9fe52fce6e803253bb84df8ad67bcc388ea7672538b853cb681a43c2e5dbfeb3.json:{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n/** create reducer */\nexport const questionReducer = createSlice({\n  name: 'questions',\n  initialState: {\n    queue: [],\n    answers: [],\n    trace: 0\n  },\n  reducers: {\n    startExamAction: (state, action) => {\n      let {\n        question,\n        answers\n      } = action.payload;\n      return {\n        ...state,\n        queue: question,\n        answers\n      };\n    },\n    moveNextAction: state => {\n      return {\n        ...state,\n        trace: state.trace + 1\n      };\n    },\n    movePrevAction: state => {\n      return {\n        ...state,\n        trace: state.trace - 1\n      };\n    },\n    resetAllAction: () => {\n      return {\n        queue: [],\n        answers: [],\n        trace: 0\n      };\n    }\n  }\n});\nexport const {\n  startExamAction,\n  moveNextAction,\n  movePrevAction,\n  resetAllAction\n} = questionReducer.actions;\nexport default questionReducer.reducer;","map":{"version":3,"names":["createSlice","questionReducer","name","initialState","queue","answers","trace","reducers","startExamAction","state","action","question","payload","moveNextAction","movePrevAction","resetAllAction","actions","reducer"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/redux/question_reducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n/** create reducer */\nexport const questionReducer = createSlice({\n    name: 'questions',\n    initialState : {\n        queue: [],\n        answers : [],\n        trace : 0\n    },\n    reducers : {\n        startExamAction : (state, action) => {\n            let { question, answers} = action.payload\n            return {\n                ...state,\n                queue : question,\n                answers\n            }\n        },\n        moveNextAction : (state) => {\n            return {\n                ...state,\n                trace : state.trace + 1\n            }\n        },\n        movePrevAction : (state) => {\n            return {\n                ...state,\n                trace : state.trace - 1\n            }\n        },\n        resetAllAction : () => {\n            return {\n                queue: [],\n                answers : [],\n                trace : 0\n            }\n        }\n    }\n})\n\nexport const { startExamAction, moveNextAction, movePrevAction, resetAllAction } = questionReducer.actions;\n\nexport default questionReducer.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,OAAO,MAAMC,eAAe,GAAGD,WAAW,CAAC;EACvCE,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAG;IACXC,KAAK,EAAE,EAAE;IACTC,OAAO,EAAG,EAAE;IACZC,KAAK,EAAG;EACZ,CAAC;EACDC,QAAQ,EAAG;IACPC,eAAe,EAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjC,IAAI;QAAEC,QAAQ;QAAEN;MAAO,CAAC,GAAGK,MAAM,CAACE,OAAO;MACzC,OAAO;QACH,GAAGH,KAAK;QACRL,KAAK,EAAGO,QAAQ;QAChBN;MACJ,CAAC;IACL,CAAC;IACDQ,cAAc,EAAIJ,KAAK,IAAK;MACxB,OAAO;QACH,GAAGA,KAAK;QACRH,KAAK,EAAGG,KAAK,CAACH,KAAK,GAAG;MAC1B,CAAC;IACL,CAAC;IACDQ,cAAc,EAAIL,KAAK,IAAK;MACxB,OAAO;QACH,GAAGA,KAAK;QACRH,KAAK,EAAGG,KAAK,CAACH,KAAK,GAAG;MAC1B,CAAC;IACL,CAAC;IACDS,cAAc,EAAGA,CAAA,KAAM;MACnB,OAAO;QACHX,KAAK,EAAE,EAAE;QACTC,OAAO,EAAG,EAAE;QACZC,KAAK,EAAG;MACZ,CAAC;IACL;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE,eAAe;EAAEK,cAAc;EAAEC,cAAc;EAAEC;AAAe,CAAC,GAAGd,eAAe,CAACe,OAAO;AAE1G,eAAef,eAAe,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/8b7079e519b3fa7222b81af6892af06aaaf27509b4d71e59480e540a9dfb6666.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\");\n    (async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          // /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questionData\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","questions","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n        console.log(\"line 18\");\n\n        (async () => {\n            try {\n                // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                console.log(\"line 23\")\n                console.log(questionData)\n                // console.log(answers)\n\n                if (questionData.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questions }));\n\n                    // /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questionData }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"Error caught:\", error); // Log the full error object\n                // console.log(\"Error message:\", error.message); // Log the error message\n\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,CAAC,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QACzB;;QAEA,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEW;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAf,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAER;UAAa,CAAC,CAAC,CAAC;QAEhE,CAAC,MAAM;UACH,MAAM,IAAIS,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAjB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEc;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA3CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA2ChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/6ebccac61c077192f8425b53434a7c8cb97e552406c5e4292996ab9457aa7ca5.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questionsData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","questions","answers","questionsData","length","startExamAction","question","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questionsData.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/377a5e6061db359f88355814ee3338a8cfd699d3d35e1d582218edb1bad5b64b.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(error);\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","error","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(error)\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questions.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/28296a1b0d76351c626a4e870348ee898ea432feccf4d5ffa6dbcdefa8fbbf75.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionsData);\n        // console.log(answers)\n\n        if (questionsData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","questionsData","length","questions","startExamAction","question","answers","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questionsData)\n                    // console.log(answers)\n\n                    if (questionsData.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/2d45a60c1fdb3d7b9a07a9d34d3daeba81e831f477a37f245653470ffe0e6816.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\");\n    (async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          // setGetData(prev => ({ ...prev, isLoading: false }));\n          // setGetData(prev => ({ ...prev, apiData: questions }));\n\n          // /** dispatch an action */\n          // dispatch(Action.startExamAction({ question: questions, answers }))\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n        console.log(\"line 18\");\n\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questionData)\n                    // console.log(answers)\n\n                    if (questionData.length > 0) {\n                        // setGetData(prev => ({ ...prev, isLoading: false }));\n                        // setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        // /** dispatch an action */\n                        // dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    // console.log(\"Error caught:\", error); // Log the full error object\n                    // console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAElB,CAAC,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAG9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QACzB;;QAEA,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzB;UACA;;UAEA;UACA;QAAA,CAEH,MAAM;UACH,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAd,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEW;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACZ,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA5CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA4ChC,OAAO,MAAMsB,gBAAgB,GAAGA,CAAA,KAAM,MAAOjB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACqB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/fb524621f6720dcd52a557e83bb161cc7928582a459648ff06ada4f50bc1e85e.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    // console.log(error)\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        // console.log(error)\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questions.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n                \n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/c4e7ff2aff2840b5b7b6d0bf1d805f2bd63e1816c4dd0ca321362da2a2b294f2.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questions.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS;;IAEjB,yCACC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEE,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMd,aAAa,CAAC,GAAGe,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1HR,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;QACtBH,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;QAEpB,IAAID,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;UACtBb,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAT,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAER,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QAEZjB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEc;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAxCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAwChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/50903a59968b84b6ab3815fb3affca22aba31c3d2e07ee9bad22b7fa99ecd3f3.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"niggagz in paris\")\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                \n                console.log(\"line 23\")\n                console.log(questions)\n                console.log(answers)\n\n                if (questions.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questions }));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questions, answers }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"niggagz in paris\")\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS;;IAErB,yCACC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEE,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMd,aAAa,CAAC,GAAGe,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1HR,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;QACtBH,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;QAEpB,IAAID,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;UACtBb,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAT,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAER,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACAjB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEc;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACR,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAxCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAwChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/5c036384e7a4632ce33c89e34bbaf775dffe5d5f284954f3eff1c1581b77e687.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    (async () => {\n      try {\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questionData\n          }));\n\n          // /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questionData\n          }));\n        } else {\n          throw new Error(\"No Question Avalle\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n\n        (async () => {\n            try {\n                const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                console.log(\"line 23\")\n                console.log(questionData)\n\n                if (questionData.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questionData }));\n\n                    // /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questionData }))\n\n                } else {\n                    throw new Error(\"No Question Avalle\");\n                }\n            } catch (error) {\n                // console.log(\"Error caught:\", error); // Log the full error object\n                // console.log(\"Error message:\", error.message); // Log the error message\n\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,CAAC,YAAY;MACT,IAAI;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QAEzB,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAa,CAAC,CAAC,CAAC;;UAExD;UACAT,QAAQ,CAACH,MAAM,CAACkB,eAAe,CAAC;YAAEC,QAAQ,EAAEP;UAAa,CAAC,CAAC,CAAC;QAEhE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,oBAAoB,CAAC;QACzC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAhB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEa;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAxCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAwChC,OAAO,MAAMwB,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOrB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACyB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/a9662f4e69021bf0b97971b30ec1855aa92cd1c01bb740f19c520edf1d1ce545.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"niggagz in paris\")\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","console","log","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();   \n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    useEffect(() => {\n        setGetData(prev => ({...prev, isLoading : true}));\n        \n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                \n                if(questions.length > 0){\n                    setGetData(prev => ({...prev, isLoading : false}));\n                    setGetData(prev => ({...prev, apiData : questions}));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question : questions, answers }))\n\n                } else{\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"niggagz in paris\")\n                setGetData(prev => ({...prev, isLoading : false}));\n                setGetData(prev => ({...prev, serverError : error}));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;EAE7FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMZ,aAAa,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1H,IAAGL,SAAS,CAACM,MAAM,GAAG,CAAC,EAAC;UACpBX,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAS,CAAC,CAAC,CAAC;;UAEpD;UACAP,QAAQ,CAACH,MAAM,CAACiB,eAAe,CAAC;YAAEC,QAAQ,EAAGR,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEvE,CAAC,MAAK;UACF,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACAf,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGY;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAlCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAkChC,OAAO,MAAMuB,gBAAgB,GAAGA,CAAA,KAAM,MAAOlB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACsB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAON,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/00a6a17635819683ae1ee1986e0355602b4d2640799d333d38d4aa2beb76ee73.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"line 38\");\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                \n                console.log(\"line 23\")\n                console.log(questions)\n                console.log(answers)\n\n                if (questions.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questions }));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questions, answers }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                console.log(\"line 38\")\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS;;IAErB,yCACC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEE,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMd,aAAa,CAAC,GAAGe,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1HR,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;QACtBH,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;QAEpB,IAAID,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;UACtBb,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAT,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAER,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZb,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBL,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEc;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACR,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAxCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAwChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/107acda180f4f1bce5cda829afd596dd97fcfaed398879c8a9c3170b92ae0457.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    (async () => {\n      try {\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questionData\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questionData\n          }));\n        } else {\n          throw new Error(\"No Question Available\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n\n        (async () => {\n            try {\n                const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                console.log(\"line 23\")\n                console.log(questionData)\n\n                if (questionData.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questionData }));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questionData }))\n\n                } else {\n                    throw new Error(\"No Question Available\");\n                }\n            } catch (error) {\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,CAAC,YAAY;MACT,IAAI;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QAEzB,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAa,CAAC,CAAC,CAAC;;UAExD;UACAT,QAAQ,CAACH,MAAM,CAACkB,eAAe,CAAC;YAAEC,QAAQ,EAAEP;UAAa,CAAC,CAAC,CAAC;QAEhE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZhB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEa;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CArCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAqChC,OAAO,MAAMwB,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOrB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACyB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/40b7fbabc1d1ca676925f6e66381a2aa099916db4a0ce2f4b75571329b62b96f.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"Error caught:\", error); // Log the full error object\n        console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","questions","answers","length","startExamAction","question","Error","error","message","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questions)\n                    console.log(answers)\n\n                    if (questions.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    console.log(\"Error caught:\", error); // Log the full error object\n                    console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/eb804ecde9202177fd0c7fb6678d415d78a8cf154c608559a24534b50222d9f1.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\")\n\n    // /** async function fetch backend data */\n    (async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          // setGetData(prev => ({ ...prev, isLoading: false }));\n          // setGetData(prev => ({ ...prev, apiData: questions }));\n\n          // /** dispatch an action */\n          // dispatch(Action.startExamAction({ question: questions, answers }))\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n        console.log(\"line 18\")\n\n            // /** async function fetch backend data */\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n\n                    console.log(\"line 23\")\n                    console.log(questionData)\n                    // console.log(answers)\n\n                    if (questionData.length > 0) {\n                        // setGetData(prev => ({ ...prev, isLoading: false }));\n                        // setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        // /** dispatch an action */\n                        // dispatch(Action.startExamAction({ question: questions, answers }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    // console.log(\"Error caught:\", error); // Log the full error object\n                    // console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS;;IAEjB;IAAA,CACC,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAG9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QACzB;;QAEA,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzB;UACA;;UAEA;UACA;QAAA,CAEH,MAAM;UACH,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAd,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEW;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA7CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA6ChC,OAAO,MAAMsB,gBAAgB,GAAGA,CAAA,KAAM,MAAOjB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACqB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOnB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACuB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/61938c0946a435878011d42df4a4ff6d7113caa7d6923c5c744697d4a3c62147.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"niggagz in paris\")\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","console","log","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                console.log(questions)\n                console.log(answers)\n\n                if (questions.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questions }));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questions, answers }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"niggagz in paris\")\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEH,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;;IAElD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMZ,aAAa,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1HC,OAAO,CAACC,GAAG,CAACP,SAAS,CAAC;QACtBM,OAAO,CAACC,GAAG,CAACN,OAAO,CAAC;QAEpB,IAAID,SAAS,CAACQ,MAAM,GAAG,CAAC,EAAE;UACtBb,UAAU,CAACI,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEH,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACI,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEF,OAAO,EAAEG;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAP,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAEV,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIU,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACAjB,UAAU,CAACI,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACI,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAED,WAAW,EAAEc;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CArCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAqChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/825857926bbed438be78e69cc65516a79fc81a14800092b10ff95b10b54545db.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"lin\")\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                \n                console.log(\"line 23\")\n                console.log(questions)\n                console.log(answers)\n\n                if (questions.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questions }));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questions, answers }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"lin\")\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS;;IAErB,yCACC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEE,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMd,aAAa,CAAC,GAAGe,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1HR,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;QACtBH,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;QAEpB,IAAID,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;UACtBb,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAT,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAER,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACAjB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEc;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACR,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAxCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAwChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/35140152a56d095d8cad656d7319be3019e076a8e406757056a7108cf7c22ae2.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        console.log(\"niggagz in paris\");\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","console","log","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                if (questions.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questions }));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questions, answers }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                console.log(\"niggagz in paris\")\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEH,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;;IAElD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMZ,aAAa,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1H,IAAIL,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;UACtBX,UAAU,CAACI,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEH,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACI,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEF,OAAO,EAAEG;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAP,QAAQ,CAACH,MAAM,CAACiB,eAAe,CAAC;YAAEC,QAAQ,EAAER,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/BjB,UAAU,CAACI,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACI,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAED,WAAW,EAAEY;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAlCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAkChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAON,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/d08bc2471179b65dfbe087360eab8ad6bbb6d12e184fecf3769bd932c8011ea9.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\");\n    console.log(\"line 18\");\n    (async () => {\n      try {\n        // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n        const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(\"line 23\");\n        console.log(questionData);\n        // console.log(answers)\n\n        if (questionData.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          // /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"Error caught:\", error); // Log the full error object\n        // console.log(\"Error message:\", error.message); // Log the error message\n\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questionData","process","env","REACT_APP_SERVER_HOSTNAME","data","length","questions","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\");\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\");\n        console.log(\"line 18\");\n\n            (async () => {\n                try {\n                    // const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n                    const questionData = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data);\n\n                    console.log(\"line 23\")\n                    console.log(questionData)\n                    // console.log(answers)\n\n                    if (questionData.length > 0) {\n                        setGetData(prev => ({ ...prev, isLoading: false }));\n                        setGetData(prev => ({ ...prev, apiData: questions }));\n\n                        // /** dispatch an action */\n                        dispatch(Action.startExamAction({ question: questions }))\n\n                    } else {\n                        throw new Error(\"No Question Avalibale\");\n                    }\n                } catch (error) {\n                    // console.log(\"Error caught:\", error); // Log the full error object\n                    // console.log(\"Error message:\", error.message); // Log the error message\n\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, serverError: error }));\n                }\n            })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAElB,CAAC,YAAY;MACT,IAAI;QACA;QACA,MAAME,YAAY,GAAG,MAAMb,aAAa,CAAC,GAAGc,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9GP,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBD,OAAO,CAACC,GAAG,CAACE,YAAY,CAAC;QACzB;;QAEA,IAAIA,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;UACzBZ,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEW;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAf,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAEF;UAAU,CAAC,CAAC,CAAC;QAE7D,CAAC,MAAM;UACH,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACA;;QAEAjB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEc;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,EAAE,CAAC;EACZ,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CA3CaD,eAAe;EAAA,QACPH,WAAW;AAAA;AA2ChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/b95c396b588d3edde07e45ecfe8b4dd3253d9becf0fe5598dda9623ce330ad46.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    /** async function fetch backend data */\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/api/questions`, data => data);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"yStKDTFtlyvHsQBaBsztnzJfXDQ=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","console","log","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();   \n    const [getData, setGetData] = useState({ isLoading : false, apiData : [], serverError: null});\n\n    useEffect(() => {\n        setGetData(prev => ({...prev, isLoading : true}));\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/api/questions`, (data) => data)\n                \n                if(questions.length > 0){\n                    setGetData(prev => ({...prev, isLoading : false}));\n                    setGetData(prev => ({...prev, apiData : questions}));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question : questions, answers }))\n\n                } else{\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                setGetData(prev => ({...prev, isLoading : false}));\n                setGetData(prev => ({...prev, serverError : error}));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAG,KAAK;IAAEC,OAAO,EAAG,EAAE;IAAEC,WAAW,EAAE;EAAI,CAAC,CAAC;EAE7FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEH,SAAS,EAAG;IAAI,CAAC,CAAC,CAAC;;IAEjD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMZ,aAAa,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,yBAAyB,gBAAgB,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE9H,IAAGL,SAAS,CAACM,MAAM,GAAG,CAAC,EAAC;UACpBX,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEH,SAAS,EAAG;UAAK,CAAC,CAAC,CAAC;UAClDD,UAAU,CAACI,IAAI,KAAK;YAAC,GAAGA,IAAI;YAAEF,OAAO,EAAGG;UAAS,CAAC,CAAC,CAAC;;UAEpD;UACAP,QAAQ,CAACH,MAAM,CAACiB,eAAe,CAAC;YAAEC,QAAQ,EAAGR,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEvE,CAAC,MAAK;UACF,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZf,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAEH,SAAS,EAAG;QAAK,CAAC,CAAC,CAAC;QAClDD,UAAU,CAACI,IAAI,KAAK;UAAC,GAAGA,IAAI;UAAED,WAAW,EAAGY;QAAK,CAAC,CAAC,CAAC;MACxD;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAjCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAiChC,OAAO,MAAMuB,gBAAgB,GAAGA,CAAA,KAAM,MAAOlB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACsB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAON,KAAK,EAAE;IACZG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
node_modules/.cache/babel-loader/a4b778b9a7bcf42492e84fe5b56fc7b6f8b3a4f29510f0c2cc3e76ba3b28e1e3.json:{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer';\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  console.log(\"line 13\");\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    console.log(\"line 16\")\n\n    /** async function fetch backend data */(async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, data => data);\n        console.log(questions);\n        console.log(answers);\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData: questions\n          }));\n\n          /** dispatch an action */\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Question Avalibale\");\n        }\n      } catch (error) {\n        // console.log(\"niggagz in paris\")\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        setGetData(prev => ({\n          ...prev,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n\n/** MoveAction Dispatch function */\n_s(useFetchQestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});\nexport const MoveNextQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.moveNextAction()); /** increase trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async dispatch => {\n  try {\n    dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","getServerData","Action","useFetchQestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","console","log","prev","questions","answers","process","env","REACT_APP_SERVER_HOSTNAME","data","length","startExamAction","question","Error","error","MoveNextQuestion","moveNextAction","MovePrevQuestion","movePrevAction"],"sources":["/home/adityamishra/Desktop/DFSI_Choice_Foundation/dfsi/src/hooks/FetchQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { getServerData } from \"../helper/helper\";\n\n/** redux actions */\nimport * as Action from '../redux/question_reducer'\n\n/** fetch question hook to fetch api data and set value to store */\nexport const useFetchQestion = () => {\n    const dispatch = useDispatch();\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\n\n    console.log(\"line 13\")\n    useEffect(() => {\n        setGetData(prev => ({ ...prev, isLoading: true }));\n        console.log(\"line 16\")\n\n        /** async function fetch backend data */\n        (async () => {\n            try {\n                const [{ questions, answers }] = await getServerData(`${process.env.REACT_APP_SERVER_HOSTNAME}/questions`, (data) => data)\n\n                console.log(questions)\n                console.log(answers)\n\n                if (questions.length > 0) {\n                    setGetData(prev => ({ ...prev, isLoading: false }));\n                    setGetData(prev => ({ ...prev, apiData: questions }));\n\n                    /** dispatch an action */\n                    dispatch(Action.startExamAction({ question: questions, answers }))\n\n                } else {\n                    throw new Error(\"No Question Avalibale\");\n                }\n            } catch (error) {\n                // console.log(\"niggagz in paris\")\n                setGetData(prev => ({ ...prev, isLoading: false }));\n                setGetData(prev => ({ ...prev, serverError: error }));\n            }\n        })();\n    }, [dispatch]);\n\n    return [getData, setGetData];\n}\n\n\n/** MoveAction Dispatch function */\nexport const MoveNextQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.moveNextAction()); /** increase trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n/** PrevAction Dispatch function */\nexport const MovePrevQuestion = () => async (dispatch) => {\n    try {\n        dispatch(Action.movePrevAction()); /** decrease trace by 1 */\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;;AAEnD;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtBd,SAAS,CAAC,MAAM;IACZS,UAAU,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IAClDG,OAAO,CAACC,GAAG,CAAC,SAAS;;IAErB,yCACC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEE,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMd,aAAa,CAAC,GAAGe,OAAO,CAACC,GAAG,CAACC,yBAAyB,YAAY,EAAGC,IAAI,IAAKA,IAAI,CAAC;QAE1HR,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;QACtBH,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;QAEpB,IAAID,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;UACtBb,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEL,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnDD,UAAU,CAACM,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEJ,OAAO,EAAEK;UAAU,CAAC,CAAC,CAAC;;UAErD;UACAT,QAAQ,CAACH,MAAM,CAACmB,eAAe,CAAC;YAAEC,QAAQ,EAAER,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QAEtE,CAAC,MAAM;UACH,MAAM,IAAIQ,KAAK,CAAC,uBAAuB,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACAjB,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEL,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC;QACnDD,UAAU,CAACM,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,WAAW,EAAEc;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ,CAAC,CAAC,CAAC,CAAC;EACR,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;;AAGD;AAAAH,EAAA,CAvCaD,eAAe;EAAA,QACPH,WAAW;AAAA;AAuChC,OAAO,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM,MAAOpB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACwB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM,MAAOtB,QAAQ,IAAK;EACtD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAAC0B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
